<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Text_processing on undefined behavior</title><link>https://peromage.github.io/tags/text_processing/</link><description>Recent content in Text_processing on undefined behavior</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 14 Nov 2023 09:26:00 +0000</lastBuildDate><atom:link href="https://peromage.github.io/tags/text_processing/index.xml" rel="self" type="application/rss+xml"/><item><title>Perl Quick Reference</title><link>https://peromage.github.io/p/perl-quick-reference/</link><pubDate>Mon, 13 Nov 2023 15:44:00 +0000</pubDate><guid>https://peromage.github.io/p/perl-quick-reference/</guid><description>&lt;h2 id="preface">Preface&lt;/h2>
&lt;p>Perl is a powerful tool to handle text processing. However, the learning curve might be steep due to some unusual syntax. I find myself even need to revisit the doc sometimes if I don&amp;rsquo;t use it often, so this post I&amp;rsquo;ll write down some commonly used patterns when it comes to text processing. That said this post is updated from time to time so remember to come back!&lt;/p>
&lt;p>When used as a command line tool, &lt;code>perl&lt;/code> is powerful enough to replace traditional text processing tools like &lt;code>sed&lt;/code>, &lt;code>awk&lt;/code>, &lt;code>grep&lt;/code>, &lt;code>tr&lt;/code> etc.. Actually using &lt;code>perl&lt;/code> instead of &lt;code>grep&lt;/code> and &lt;code>tr&lt;/code> might be a little overkill in most cases but the functionalities of &lt;code>sed&lt;/code> and &lt;code>awk&lt;/code> can be almost replaced. I recommend someone who starts learning text processing and regex to start with Perl. The reasons are:&lt;/p></description></item></channel></rss>